# compare the neighbors first
import numpy as np
import roll_unroll 
import argparse

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-g_cpu", "--graph_cpu", type = str, required=True,
    help="path to the graph generated by the cpu, npz format")
ap.add_argument("-g_gpu", "--graph_gpu", type = str, required=True,
    help="path to the graph generated by the gpu, npz format")
ap.add_argument("-k", "--k", type = int,  required=True,
    help="number of nns")
args = vars(ap.parse_args())

# get the gpu results
results_gpu = np.load(args["graph_gpu"])
ngbrs_gpu = results_gpu['ngbrs']
ngbrs_gpu = roll_unroll.roll(ngbrs_gpu, k=args["k"], n=int (len(ngbrs_gpu)/args["k"]))
ngbrs_gpu.sort(axis=-1)
print('gpu_result, the neighbors are from 30333 to 30338:', ngbrs_gpu[30333:30338])
# get the cpu resutls
results_cpu = np.load(args["graph_cpu"])
ngbrs_cpu = results_cpu['ngbrs']
ngbrs_cpu = roll_unroll.roll(ngbrs_cpu, k=args["k"], n=int (len(ngbrs_cpu)/args["k"]))
ngbrs_cpu.sort(axis=-1)
print('cpu resut, the neighbors are from 30333 to 30338:', ngbrs_cpu[30333:30338])

# get the difference in the neighbors of the cpu and gpu results
diff = ngbrs_cpu - ngbrs_gpu
non_zero = np.count_nonzero(diff)

print('diff in neighbors = ngbrs_cpu - ngbrs_gpu for 30333 to 30338:', ngbrs_gpu[30333:30338] -  ngbrs_cpu[30333:30338])
print('non zero elements in diff of neighbors:', non_zero)

# compare the weights now
wgts_gpu = results_gpu['weights']
wgts_gpu = roll_unroll.roll(wgts_gpu,k=args["k"], n=int (len(wgts_gpu)/args["k"]))
wgts_gpu.sort(axis=-1)
print('gpu_result. the weights from gpu for 30333 to 30338:', wgts_gpu[30333:30338])
wgts_cpu = results_cpu['weights']
wgts_cpu = roll_unroll.roll(wgts_cpu, k=args["k"], n=int (len(wgts_cpu)/args["k"]))
wgts_cpu.sort(axis=-1)
print('cpu resut, the weights from cpu for 30333 to 30338:', wgts_cpu[30333:30338])
diff = wgts_cpu - wgts_gpu
diff = np.around(diff, decimals= 5)
print('diff in weights = wgts_cpu- wgts_gpu for 30333 to 30338:', diff[30333:30338])
print('sum of all the elemets in abs(cpu_weights - gpu_weights):' , np.sum(np.sum(np.abs(diff))))
print('contribution of each element in that sum is = sum / n:', np.sum(np.sum(np.abs(diff)))/(int (len(ngbrs_cpu)/args["k"])))
